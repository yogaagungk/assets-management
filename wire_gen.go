// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/yogaagungk/assets-management/config"
	"github.com/yogaagungk/assets-management/handler"
	"github.com/yogaagungk/assets-management/middleware"
	"github.com/yogaagungk/assets-management/services/menus"
	"github.com/yogaagungk/assets-management/services/roles"
	"github.com/yogaagungk/assets-management/services/users"
)

import (
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Injectors from main.go:

func InitializeMenuHandler() handler.Menu {
	db := config.ProvideDatabase()
	repository := menus.ProvideRepo(db)
	service := menus.ProvideService(repository)
	menu := handler.ProvideMenu(service)
	return menu
}

func InitializeRoleHandler() handler.Role {
	db := config.ProvideDatabase()
	repository := roles.ProvideRepo(db)
	service := roles.ProvideService(repository)
	role := handler.ProvideRole(service)
	return role
}

func InitializeUserHandler() handler.User {
	db := config.ProvideDatabase()
	repository := users.ProvideRepo(db)
	rolesRepository := roles.ProvideRepo(db)
	conn := config.ProvideRedisPool()
	service := users.ProvideService(repository, rolesRepository, conn)
	user := handler.ProvideUser(service)
	return user
}

func InitializeAuthorizationService() middleware.AuthService {
	conn := config.ProvideRedisPool()
	authService := middleware.ProvideAuthService(conn)
	return authService
}

// main.go:

func main() {
	db := config.OpenDatabaseConnection()
	defer db.Close()

	menusHandler := InitializeMenuHandler()
	rolesHandler := InitializeRoleHandler()
	usersHandler := InitializeUserHandler()

	authorizationService := InitializeAuthorizationService()

	r := gin.Default()
	r.Use(gin.Recovery())

	authorizedMapping := r.Group("/")
	authorizedMapping.Use(authorizationService.Authorization())
	{

		authorizedMapping.POST("/menus", menusHandler.Post)
		authorizedMapping.PUT("/menus", menusHandler.Put)
		authorizedMapping.GET("/menus", menusHandler.Get)
		authorizedMapping.DELETE("/menus/:id", menusHandler.Delete)

		authorizedMapping.GET("/logout", usersHandler.Logout)
	}

	r.GET("/roles", rolesHandler.Get)

	r.POST("/register", usersHandler.Register)
	r.POST("/login", usersHandler.Login)

	r.Run(":8081")
}
